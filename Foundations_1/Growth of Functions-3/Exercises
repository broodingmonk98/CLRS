3.1.1
Selecting c1 as 1/2 and c2 as 2, and n0 as the base case, then
1/2(f(n) + g(n)) <= max(f(n),g(n)) <= 2(f(n)

3.1.2
Selecting c1 as 1/2^b and c2 as 2^b and n0 as a
(1/2 n)^b < (n+a)^b < (n+n)^b < 2^b n^b     for all n>a
Hence (n+a)^b = theta(n^b).

3.1.3
Big O notation is generally used to upper bound a quantity, and hence using it to give a lower bound is not very meaningful.

3.1.4
2^(n+1) is O(2^n) because 2^(n+1) is 2*2^n and constant factors dont really matter. However 2^2n is not O(2^n) because if it was so, then there would exist a c such that 2^2n < c 2^n for all n> some n0. However this would imply that 2^n < c asymptotically, while is not true.

3.1.5
f(n) is theta(g(n)) iff it is O(g(n)) and omega(g(n)).
This follows directly from their definitions. If f(n) is theta(g(n)) then there exists c1 and c2 such that for all n>n0 c1 g(n) < f(n) < c2 g(n), looking at the left side of this we get that f(n) is O(g(n)) and looking at the left inquality we get that f(n) is omega(g(n)). This argument can also be applied backwards. Hence we have proved the necessary and sufficiency of the above statement.

3.1.6
Same as 3.1.5(previous question).

3.1.7
o(g(n)) is the set of functions satisfying, for all c>0 there exists n0 such that f(n) < c g(n), while for w(g(n)) the function has to satisfy f(n) > c g(n) for all n. Since by the law of trichotomy, both these equations can't be satisfied at once, no f(n) exists that lies on both sets, and as such their intersection is the null set.

3.1.8
omega(g(n,m)) = {f(n,m) : there exist constants c,n0 and m0 such that 0<= c g(n,m) < f(n,m) for all n>n0 or m>m0}
theta(g(n,m)) = {f(n,m) : there exist constants c1,c2,n0,m0 such that c1 g(n,m) < f(n,m) < c2 g(n,m) for all n> n0 or m>m0}.


3.2.1
f(n1) >= f(n2) if n1>=n2, and the same goes for g(n)
Therefore f(n1) + g(n1) >= f(n2) + g(n2) if n1>=n2
Similarly since f(n1) >= f(n2) if n1 >= n2 and g(n1) >= g(n2) if n1>=n2 
Therefore clearly f(g(n1)) >= f(g(n2)) if n1>=n2.
If a>b and c>d then ac > bc, and so clearly f(n1)g(n1) > f(n2)g(n2) if f(n) and g(n) are positive for all n1>n2 and so it is also monotically increasing.

3.2.2
a^(log_b(c)) = c^(log_b(a)).

a^(log_b(c)) = a^(log_b(a^(log_a(c)))) = a^(log_a(c) * log_b(a)) = c^(log_b(a)).

3.2.3
Stirling's approximation : n!= root(2 pi n)(n/e)^n e^a_n    where a_n ~ 1/12n
taking log on both sides lg n!= 1/2c lg n  + nc lg n - c lg n where all the c's are different constants. So if we take theta on both sides, the dominant term is the one finally left asymptotically, and is theta(n lg n).
n! = n*(n-1)*(n-2)...1 > 2*2*2..n-times...*2 for all n>3 and so n! = w(2^n).
Similarly n! = n*(n-1)*(n-2)...1 < n*n*n...n-times..*n for all n > 1 and so and so we for any given c>0 we can find n0 namely n0>1/c so that n> c and so the 1 in the n! and one of the n's in the n^n will be nullified by the c and still the inequality will hold for all n>n0. Therefore n! is o(n^n). A similar n0 can be found for the first case (n! = w(2^n)) by taking n0 > c*2.

3.2.4
We take only powers of 2 for n and so do away with floors and ceils.
lg lg(n)! ~ lg(n) lg lg(n) whereas lg n^k is k lg n and so now we are essentially comparing n lg(n) and n and clearly n lg(n) is greater and so lg (n)! is not bounded polynomially.
For lg ( lg(n))! this is not the case and we are left comparing n and lg n * lg lg n and in this case n is greater and so lg lg n ! is polynomially bounded.

3.2.5
let i be lg*(n) then lg(lg*(n)) will be lg(i) while lg*(lg(n)) will be i-1 and so lg*(lg(n)) will be larger asymptotically.

3.2.6
The Golden Ration is (root(5)+1)/2 and its conjugate is (1-root(5))/2, substituting them in the equation we get 5+1+2root(5) = 2root(5)+2 + 4 which is clearly true, and 1+5-2root(5)= 2 - 2root(5)+4 which is also clearly true. Therefore they both satisfy the equation x^2=x+1.

3.2.7
Fi = phi^i - phi^^i / root(5)
Proof:
	Base Case i:=1	: F1= 1 - 1 / root(5) = 0
	Induction Step: If Fi = phi^i - phi^^i/ root(5) 
			   Fi-1 = phi^(i-1)-phi^^i-1 / root(5)
			then 
			   Fi+1 = Fi+Fi-1 which comes out as
				  phi^i-1(phi^2) - phi^^i-1(phi^^2)/root(5)
				  phi^i+1 - phi^^i+1/root(5)

2.3.8
TODO.
Proving the converse is easy, but not sure how to prove this.
